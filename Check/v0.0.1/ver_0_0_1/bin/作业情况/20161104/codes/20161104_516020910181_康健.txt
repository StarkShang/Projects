20161104_516020910181_康健
L01
func__.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int elements[1024];
	const int capacity = 1024;
	int count = 0;
}x;

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)
{                                             
	if (x.count == 1023)                       //判断是否越界
		return -1;                             
	else {
		x.elements[x.count] = in;              //若不越界，输入
		x.count += 1;                          //加1
		return 0;          
		}
}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)
{
	if (x.count == 0)                  //若无可出
		return -1;                          
	else {                             //又可出
		out = x.elements[x.count-1];   //赋值
		x.count =x.count-1;            //减1
		return 0;                     
	}
}
main.cpp
#include <iostream>

struct Stack
{
	int elements[1024];
	const int capacity = 1024;
	int count = 0;
};
extern int push(struct Stack& stack, int in);
extern int pop(struct Stack& stack, int& out);

int main(int argc, char* argv[])
{
	struct Stack stack;
	stack.count = 0;
	std::cout << "At beginning, the stack has " << stack.count << " elements." << std::endl;
	std::cout << "---- Begin to push elements into stack ----" << std::endl;
	for (int i = 0; i < 10; i++)
	{
		int in = i*i;
		push(stack, in);
		std::cout << "[" << i << "] : push " << in << " into the stack;" << std::endl;
	}
	std::cout << "---- End to push elements into stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl << std::endl;

	std::cout << "---- Begin to pop elements from stack ----" << std::endl;
	int out;
	for (int i = 0; i < 10; i++)
	{
		int flag = pop(stack, out);
		if (0 == flag)
		{
			std::cout << "[" << i << "] : pop " << out << " from the stack;" << std::endl;
		}
		else
		{
			
		}
	}
	std::cout << "---- End to pop elements from stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl;

	return 0;
}
L02
func__.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
extern char spechars[10] = { ' ','"','#','%','&','(',')','/',':','@' };     //����ȫ�ֱ���
int substitute(char* str, int len)                                             
{
	char a[10] = { '2','2','2','2','2','2','2','2','3','4' };               //�滻����
	char c[10] = { '0','2','3','5','6','8','9','F','A','0' };               //�滻����
	for (int i = 0; i < len; i++) {                                       
		for(int j=0;j<10;j++){
			if (str[i] == spechars[j]) {                                     //�Ƿ�Ϊ�������
				len += 2;                                                    //���ȼ�2
				for (int k = len; k > i + 2; k--)
					str[k] = str[k - 2];
				str[i] = '%';                                                                                             
				str[i + 1] = a[j];
				str[i + 2] = c[j];
			}
		}
	}
	if (len < 1024)
		return 0;
	else return -1;
}
main.cpp
#include <iostream>
#include <string>
extern int substitute(char* str, int len);
int main(int argc, char* argv[])
{
	char str[1024] = { 0 };
	std::cout << "Please input an URL [less than 1024(include'\\0')] : ";
	std::cin.getline(str, 1024);
	int flag = (int)substitute(str, (int)strlen(str));
	if (0 == flag)
	{
		std::cout << "The new URL is : " << str << std::endl;
	}
	else
	{
		std::cout << "The URL is too long to substitute!";
	}
	return 0;
}
L04
func__.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{
	int a;                                    //定义变量用来交换
	for (int i = len; i >=0; i--) {           
		for (int j = 0; j < i-1; j++) {
			if (nums[j] > nums[j + 1]) {      //如果大的在左边
				a = nums[j];                  //交换
				nums[j] = nums[j+1];
				nums[j + 1] = a;
			}
		}
	}
}
main.cpp
#include <iostream>

extern void insertSort(float* nums, int len);
int main(int argc, char* argv[])
{
	int len = 0;
	float nums[1024] = { 0 };
	std::cout << "Please input the size of numbers [less than 1024] : ";
	std::cin >> len;
	std::cout << "Please input numbers [less than 1024] : ";
	for (int i = 0; i < len; i++)
	{
		std::cin >> nums[i];
	}

	insertSort(nums, len);

	std::cout << "After insertion sorting, the numbers are : ";
	for (int i = 0; i < len; i++)
	{
		std::cout << nums[i] << " ";
	}
	std::cout << std::endl;

	return 0;
}
