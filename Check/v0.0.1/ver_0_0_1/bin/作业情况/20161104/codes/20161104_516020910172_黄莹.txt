20161104_516020910172_黄莹
L01
func02.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int elements[1024];
	int capacity;
	int count;
};

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)
{
	int flag;//定义变量
	if (stack.count<=1024)//判断数组长度
	{flag=0;
	stack.elements[stack.count]=in;//入栈
    stack.count++;//入栈数增加
	}
	else
	{flag=-1;}//无法入栈
	
	return(flag);//返回判断值

}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)
{
	int flag;//定义变量
	if(stack.capacity<0)//判断能否出栈
	{flag=-1;}//不能出栈
	else
	{flag=0;
	out=stack.elements[stack.count-1];//将出栈数赋值
	stack.count--;//减去入栈的个数
	
	}

	return(flag);//返回判断值

}
L02
func02.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
#include<string.h>//
extern char spechars[10]={' ','"','#','%','&','(',')','/',':','@'};//
 
int substitute(char* str, int len)
{ 
	int flag;//�������
	for( int i=0;i<=len;i++)//��ʼ�ַ������ѭ��
	{if( str[i]==spechars[0])//�ҵ���Ӧ���ַ�
	    { 
			for(int j=i+1;j<=len+2;j++)//��ʼ�滻�ַ�
			{str[j+2]=str[j];}//��֮����ַ���������ƶ�����λ��
			str[i]='%';//��ԭ�����ַ��滻
			str[i+1]='2';//���²��������ַ�
			str[i+2]='0';//���²��������ַ�
        }
		else if( str[i]==spechars[1])//�ظ��������̲��������ַ�
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='2';}
		else if( str[i]==spechars[2])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='3';}
		else if( str[i]==spechars[3])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='5';}
		else if( str[i]==spechars[4])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='6';}
		else if( str[i]==spechars[5])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='8';}
		else if( str[i]==spechars[6])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='9';}
		else if( str[i]==spechars[7])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='F';}
		else if( str[i]==spechars[8])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='3';
			str[i+2]='A';}
		else if( str[i]==spechars[9])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='4';
			str[i+2]='0';}
	}
	
	if((strlen(str)+1)<=1024)//�ж��ַ����ĳ���
	{flag=0;}//�ڷ�Χ��
	else
		flag=-1;//�ڷ�Χ��
	return(flag);//���غ������ж�ֵ
}
L03
func02.cpp
/**********************************
 * 字符串查找函数
 * 输入 : str要进行查找操作的字符串
 * 输入 : strLen查找字符串长度
 * 输入 : pattern要匹配的字符串
 * 输入 : patternLen匹配字符串长度
 * 输入 : indexes匹配项索引数组
 * 输出 : 成功匹配个数
 **********************************/
#include<string.h>
#include<string>
int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes)
{   int a=0;
	for(int i=0;i<=strLen;i++)
	{
		for(int j=i;j<patternLen+i;j++)
		{char* n =n+str[j];	
	    if (n==pattern)
	    {a=a+1;}
		}
    }
	return(a);
		
}

main.cpp
#include <iostream>
#include <string>

extern int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes);
int main(int argc, char* argv[])
{
	char str[1024] = { 0 };
	char pattern[1024] = { 0 };
	int  indexes[1024] = { 0 };
	std::cout << "Please input the text [less than 1024(include'\\0')] : ";
	std::cin.getline(str, 1024);
	std::cout << "Please input the search pattern [less than 1024(include'\\0')] : ";
	std::cin.getline(pattern, 1024);

	int num = searchSubstring(str, (int)strlen(str), pattern, (int)strlen(pattern), indexes);
	if (0 == num)
	{
		std::cout << "There is no matching!";
	}
	else if (1 == num)
	{
		std::cout << "There is " << num << " matching." << std::endl;
	}
	else
	{
		std::cout << "There are " << num << " matchings." << std::endl;
	}
	for (int i = 0; i < num; i++)
	{
		std::cout << "\t[" << i+1 << "] start form : " << indexes[i] << std::endl;
	}
	return 0;
}
L04
func02.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{   int i,j,key;//定义变量
    for(i=0;i<len; i++)//开始循环插入
	{   
		key = nums[i];//找出数组中的目标比较数
         for(j=i-1; j>=0;j--)//从后向前比较
		 {
             if (nums[j]> key) //如果前者大于后者
			 {
                 nums[j+1]=nums[j];//将前面的数据依次赋给后面的数据
             }
             else
                break;//找到插入的位置
          }
         nums[j+1]=key;//将目标数插入位置
     }
}
L06
func__.cpp
/**********************************
 * 计算子数组最大和函数
 * 输入 : nums要进行计算操作的数组
 * 输入 : len输入数组长度
 * 输出 : 最大和
 **********************************/
float maxSum(float* nums, int len)
{
	
}

main.cpp
#include <iostream>

extern float maxSum(float* nums, int len);
int main(int argc, char* argv[])
{
	int len = 0;
	float nums[1024] = { 0 };
	std::cout << "Please input the size of numbers [less than 1024] : ";
	std::cin >> len;
	std::cout << "Please input numbers [less than 1024] : ";
	for (int i = 0; i < len; i++)
	{
		std::cin >> nums[i];
	}

	std::cout << "The maximum sum of the subarray : " << maxSum(nums, len) << std::endl;
	
	return 0;
}
