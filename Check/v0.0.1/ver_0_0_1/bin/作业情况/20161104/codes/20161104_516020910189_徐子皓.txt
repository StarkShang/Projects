20161104_516020910189_徐子皓
L01
func19.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int elements[1024];  //储存栈数据的数组成员
	const int capacity = 1024; //数组总长度
	int count; //已入栈个数
};

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)
{
	if (stack.count < stack.capacity)
	{ 
		stack.count = stack.count + 1;
		stack.elements[stack.count - 1] = in;           //输入要入栈的数
		return 0;                                       //成功入栈
	}
	else
		return -1;                                      //入栈失败
}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)
{
	if (stack.count >= 1)
	{
		out = stack.elements[stack.count - 1];  //输出要出栈的数
		stack.count = stack.count - 1;
		return 0;                                //成功出栈
	}
	else
		return -1;                               //无法出栈
}
L02
func19.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
char spechars[10] = { ' ', '"','#','%','&','(',')','/',':','@' }; //����ȫ������
char changed[10][4] = { "%20","%22","%23","%25","%26","%28","%29","%2F","%3A","%40" };  //�����滻����
void change(char* str, char changed[10][4], int i, int j, int len);   //��������
int substitute(char* str, int len)
{
	for (int i = 0; i < len; i++)
	{
		for (int a = 0; a < 10; a++)
		{
			if (str[i] == spechars[a])             //�ҵ��������
			{
				change(str, changed, i + 1, a + 1, len);   //�滻ΪASCII��
				len = len + 2;        //���鳤�ȱ��
				break;   //���⽫ASCII���С�%'����Ϊ�������
			}	
		}
	}
	str[len] = '\0';
	len = len + 1; 
	if (len > 1024)    //�����Ƿ񳤶����
		return -1;
	else
		return 0;
}

void change(char* str, char changed[10][4],int i,int j,int len) //��changed�����еĵ�jλ��str�����еĵ�iλ����
{
	for (int k = len; k > i; k = k - 1)
	{
		str[k + 1] = str[k - 1];
	}
	str[i - 1] = changed[j - 1][0];
	str[i] = changed[j - 1][1];
	str[i + 1] = changed[j - 1][2];
}

L04
func19.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void change(float* nums, int len, int i);
void insertSort(float* nums, int len)
{
	for (int i = 1; i <= len - 1; i++)
	{
		if (nums[len - 1] > nums[i - 1])                      //比已排序的数的最大值大
			change(nums, len, i + 1);                         //将其放置于第i+1位
		else if (nums[len - 1] < nums[0])                     //比已编译的最小数小
			change(nums, len, 1);                             //将其放置于第一位
		else
		{
			for (int k = i; k >= 2; k--)                    
			{
				if (nums[k - 2] < nums[len - 1] && nums[len - 1] < nums[k - 1])             //介于第k-1个数与第k个数之间
					change(nums, len, k);                                                   //将其放置于第k位
			}
		}

	}
}

void change(float* nums, int len, int i)//将最后一个数放置到第i位
{
	float a = nums[len - 1];
	for (int j = len - 1; j >= i ; j--)
	{
		nums[j] = nums[j - 1];
	}
	nums[i - 1] = a;
}
