20161104_5140729048_陈凯文
L01
func29.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int elements[1024];
	static const int capacity = 1024;
	int count ;
	
};

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)
{
	if(stack.count<stack.capacity)//栈是否满了
	{
	 stack.elements[stack.count]=in;//进行入栈操作
	 stack.count++;//数组元素个数+1
	 return 0;//结束并返回0
	}
	else
	return -1;//满了则返回-1
}


/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)
{
	if(stack.count>0)//栈是否空了
	{
    out=stack.elements[stack.count-1];//进行出栈操作
	stack.count--;//数组元素个数-1
	return 0;//结束并返回0
	}
	else
	return -1;//满了则返回-1
}

main.cpp
#include <iostream>

struct Stack
{
	int elements[1024];
	static const int capacity ;
	int count;
};
extern int push(struct Stack& stack, int in);
extern int pop(struct Stack& stack, int& out);

int main(int argc, char* argv[])
{
	struct Stack stack;
	stack.count = 0;
	std::cout << "At beginning, the stack has " << stack.count << " elements." << std::endl;
	std::cout << "---- Begin to push elements into stack ----" << std::endl;
	for (int i = 0; i < 10; i++)
	{
		int in = i*i;
		push(stack, in);
		std::cout << "[" << i << "] : push " << in << " into the stack;" << std::endl;
	}
	std::cout << "---- End to push elements into stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl << std::endl;

	std::cout << "---- Begin to pop elements from stack ----" << std::endl;
	int out;
	for (int i = 0; i < 10; i++)
	{
		int flag = pop(stack, out);
		if (0 == flag)
		{
			std::cout << "[" << i << "] : pop " << out << " from the stack;" << std::endl;
		}
		else
		{
			
		}
	}
	std::cout << "---- End to pop elements from stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl;

	return 0;
}
L02
func29.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
#include <string>
char spechar[10]={' ','"','#','%','&','(',')','/',':','@'};
int substitute(char* str, int len)
{int i = 0;
 for(i=0;i<=len;i++)//���ַ�����Ԫ��������
	{
		if (str[i]==spechar[0]) 
		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='0';
		}
	 else if (str[i]==spechar[1]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='2';
		}
	 else if (str[i]==spechar[2]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='3';
		}
	 else if (str[i]==spechar[3]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='5';
		}
	 else if (str[i]==spechar[4]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='6';
		}
	 else if (str[i]==spechar[5]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='8';
		}
	 else if (str[i]==spechar[6]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='9';
		}
	 else if (str[i]==spechar[7]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='F';
		}
	 else if (str[i]==spechar[8]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='3';
			str[i+2]='A';
		}
	 else if (str[i]==spechar[9]) 		{
		int j=1024;
		for(j=1024;j>i;j--)
		{
		str[j]=str[j-2];
		}
			str[i]='%';
			str[i+1]='4';
			str[i+2]='0';
		}
	 else 1;
 }
 if (strlen(str)>1024)
	 return -1;
 else 
	 return 0;
}
main.cpp
#include <iostream>
#include <string>

extern int substitute(char* str, int len);

int main(int argc, char* argv[])
{
	char str[1024] = { 0 };
	std::cout << "Please input an URL [less than 1024(include'\\0')] : ";
	std::cin.getline(str, 1024);
	int flag = (int)substitute(str, (int)strlen(str));
	if (0 == flag)
	{
		std::cout << "The new URL is : " << str << std::endl;
	}
	else
	{
		std::cout << "The URL is too long to substitute!";
	}
	return 0;
}
L03
func29.cpp
/**********************************
 * 字符串查找函数
 * 输入 : str要进行查找操作的字符串
 * 输入 : strLen查找字符串长度
 * 输入 : pattern要匹配的字符串
 * 输入 : patternLen匹配字符串长度
 * 输入 : indexes匹配项索引数组
 * 输出 : 成功匹配个数
 **********************************/
int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes)
{
	int num=0;//定义变量作为返回值，并统计字符串匹配命中个数
	int i=0;//循环时用的变量
	int j=0;//循环时用的变量
	bool flag;//布尔变量用来判断匹配是否命中
	for(i=0;i<=strLen;i++)//查找字符串从头开始进入循环
	{
	if (str[i]==pattern[0])//当查找串中有字符与匹配串中第一个字符相等时
	{
     flag=1;//1表示目前匹配的字符都符合
	  for(j=0;j<patternLen;j++)//循环验证之后的字符是否匹配
	  {
	   if(str[i+j]!=pattern[j]) flag=0;//出现不匹配则flag变为0
	  }
	 if (flag==1)//如果循环验证完之后flag还是1就说明匹配命中
	 {
		  indexes[num]=i;//录入索引
		  num++;//计数加1
	 }
	 else 1;
	}
	}
	return num;//返回并结束
}

main.cpp
#include <iostream>
#include <string>

extern int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes);
int main(int argc, char* argv[])
{
	char str[1024] = { 0 };
	char pattern[1024] = { 0 };
	int  indexes[1024] = { 0 };
	std::cout << "Please input the text [less than 1024(include'\\0')] : ";
	std::cin.getline(str, 1024);
	std::cout << "Please input the search pattern [less than 1024(include'\\0')] : ";
	std::cin.getline(pattern, 1024);

	int num = searchSubstring(str, (int)strlen(str), pattern, (int)strlen(pattern), indexes);
	if (0 == num)
	{
		std::cout << "There is no matching!";
	}
	else if (1 == num)
	{
		std::cout << "There is " << num << " matching." << std::endl;
	}
	else
	{
		std::cout << "There are " << num << " matchings." << std::endl;
	}
	for (int i = 0; i < num; i++)
	{
		std::cout << "\t[" << i+1 << "] start form : " << indexes[i] << std::endl;
	}
	return 0;
}
L04
func29.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{
 int i=1;//定义变量用来循环
 int j=0;//定义变量用来循环
 float temp;//中间变量用来存放数据
 int k=0;//中间变量
 for(i=1;i<len;i++)//将第i+1个元素加入前i个已经排好序的序列进行排序
 {
  for(j=0;j<i;j++)//第i+1个元素以此和之前的元素比大小
  {
	  if (nums[i]<=nums[j])//如果这个元素不比第j+1个元素大，那它就应该在第j个位置
	  {
		  temp=nums[i];//存放这个元素
		  k=i;//用k代替i来循环，为了不改变i的值
	    for(k;k>j;k--)
		{
		 nums[k]=nums[k-1];//从j到i的元素向后移动一位
		}
		nums[j]=temp;//原来第i+1个元素变成第j个元素
	    break;
	  }
  }
 }
}
main.cpp
#include <iostream>

extern void insertSort(float* nums, int len);
int main(int argc, char* argv[])
{
	int len = 0;
	float nums[1024] = { 0 };
	std::cout << "Please input the size of numbers [less than 1024] : ";
	std::cin >> len;
	std::cout << "Please input numbers [less than 1024] : ";
	for (int i = 0; i < len; i++)
	{
		std::cin >> nums[i];
	}

	insertSort(nums, len);

	std::cout << "After insertion sorting, the numbers are : ";
	for (int i = 0; i < len; i++)
	{
		std::cout << nums[i] << " ";
	}
	std::cout << std::endl;

	return 0;
}
L06
func__.cpp
/**********************************
 * 计算子数组最大和函数
 * 输入 : nums要进行计算操作的数组
 * 输入 : len输入数组长度
 * 输出 : 最大和
 **********************************/
float maxSum(float* nums, int len)
{
	
}

main.cpp
#include <iostream>

extern float maxSum(float* nums, int len);
int main(int argc, char* argv[])
{
	int len = 0;
	float nums[1024] = { 0 };
	std::cout << "Please input the size of numbers [less than 1024] : ";
	std::cin >> len;
	std::cout << "Please input numbers [less than 1024] : ";
	for (int i = 0; i < len; i++)
	{
		std::cin >> nums[i];
	}

	std::cout << "The maximum sum of the subarray : " << maxSum(nums, len) << std::endl;
	
	return 0;
}
