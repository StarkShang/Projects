20161104_516020910184_裘哲轩
L01
func14.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack//建立一个名为Stack 的结构体
{
	int element[1024];//定义存储栈数据的int 数组成员 : elements 
	int capacity;//定义表示数组总长度的 const int 成员 : capacity 
	int count ;//定义
}stack;//定义Stack类型结构体stack

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)//定义入栈函数push
{

	if(stack.count==stack.capacity)//如果客栈已满
		return -1;//返回值-1
	else//如果客栈未满
		{
			stack.count++;
			stack.element[stack.count]=in;//添加新元素in到数组element
			return 0;//返回值0
		}
}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)//定义出栈函数push
{
	if(stack.count==0)//如果客栈已空
		return -1;//返回-1
	else//如果客栈未空
		out=stack.element[stack.count];//将出栈元素的值赋给out
		stack.count--;//入栈元素个数减一
	return 0;//返回0
}
main.cpp
#include <iostream>

struct Stack
{
	int _elements[1024];
	 int capacity ;
	int count ;
};
extern int push(struct Stack& stack, int in);
extern int pop(struct Stack& stack, int& out);

int main(int argc, char* argv[])
{
	struct Stack stack;
	stack.count = 0;
	stack.capacity=1024;
	std::cout << "At beginning, the stack has " << stack.count << " elements." << std::endl;
	std::cout << "---- Begin to push elements into stack ----" << std::endl;
	for (int i = 0; i < 10; i++)
	{
		int in = i*i;
		push(stack, in);
		std::cout << "[" << i << "] : push " << in << " into the stack;" << std::endl;
	}
	std::cout << "---- End to push elements into stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl << std::endl;

	std::cout << "---- Begin to pop elements from stack ----" << std::endl;
	int out;
	for (int i = 0; i < 10; i++)
	{
		int flag = pop(stack, out);
		if (0 == flag)
		{
			std::cout << "[" << i << "] : pop " << out << " from the stack;" << std::endl;
		}
		else
		{
			
		}
	}
	std::cout << "---- End to pop elements from stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl;

	return 0;
}
L02
func14.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
char spechars[10]={' ','""','#','%','&','(',')','/',':','@'};//�洢����ת���ַ� ��ȫ������char spechars[10]��
int substitute(char* str, int len)//���庯��
{
	int i,j,k;
	char t;//�������
	for(i=0;i<=len;i++)//������iС���ַ�������lenʱִ��ѭ�����
		{
			for(j=0;j<10;j++)
			{
			if (str[i]==spechars[j])//�����������ת���ַ�
				{
					t=str[i];
					str[i]='%';
					len+=2;//���ַ����滻��%�������������ַ���λ��
		    	
				for(k=len;k>i;k--)
				{
					str[k]=str[k-2];
				}              //���ҳ���ת���ַ���������ַ�����������λ
				if (t==' ')//����Ҫ�� �ڿճ���������λ�� ����URLת���ַ�16 ���� ASCII����
				{
					str[i+1]='2';
					str[i+2]='0';
					break;
				}
				if (t=='""')
				{
					str[i+1]='2';
					str[i+2]='2';
					break;
				}
				if (t=='#')
				{
					str[i+1]='2';
					str[i+2]='3';
					break;
				}
				if (t=='%')
				{
					str[i+1]='2';
					str[i+2]='5';
					break;
				}
				if (t=='&')
				{	
					str[i+1]='2';
					str[i+2]='6';
					break;
				}
				if (t=='(')
				{
					str[i+1]='2';
					str[i+2]='8';
					break;
				}
				if (t==') ')
				{
					str[i+1]='2';
					str[i+2]='9';
					break;
				}
				if (t=='/')
				{
					str[i+1]='2';
					str[i+2]='F';
					break;
				}
				if (t==':')
				{
					str[i+1]='3';
					str[i+2]='A';
					break;
				}
				if (t=='@')
				{
					str[i+1]='4';
					str[i+2]='0';
					break;
				}
				
			}
			}
	}
	
	if(len>1023)
		return -1;//���ת�����ַ������ȳ���2013������-1
	else 
		return 0;//��δ����2013������0
}
main.cpp
#include <iostream>
#include <string>
extern char spechars[10];
extern int substitute(char* str, int len);
int main(int argc, char* argv[])
{
	char str[1024] = { 0 };
	std::cout << "Please input an URL [less than 1024(include'\\0')] : ";
	std::cin.getline(str, 1024);
	int len = (int)strlen(str);
	int flag = (int)substitute(str, len);
	if (0 == flag)
	{
		std::cout << "The new URL is : " << str << std::endl;
	}
	else
	{
		std::cout << "The URL is too long to substitute!";
	}
	return 0;
}
L04
func14.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{
	int i,j,t;//定义变量
	for (i=0;i<len;i++)//循环语句从第一张牌开始排序
	{
		for (j=i;j>=1;j--)//对于已经排号的i-1张牌，第i张开始排序
			{
				if (nums[j]<nums[j-1])//如果第i张比前面的牌要小，执行循环语句替换
				{
					t=nums[j];
					nums[j]=nums[j-1];
					nums[j-1]=t;//替换语句
				}
			}
	}
}
main.cpp
#include <iostream>

extern void insertSort(float* nums, int len);
int main(int argc, char* argv[])
{
	int len = 0;
	float nums[1024] = { 0 };
	std::cout << "Please input the size of numbers [less than 1024] : ";
	std::cin >> len;
	std::cout << "Please input numbers [less than 1024] : ";
	for (int i = 0; i < len; i++)
	{
		std::cin >> nums[i];
	}

	insertSort(nums, len);

	std::cout << "After insertion sorting, the numbers are : ";
	for (int i = 0; i < len; i++)
	{
		std::cout << nums[i] << " ";
	}
	std::cout << std::endl;

	return 0;
}
