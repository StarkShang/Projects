20161104_516020910174_陈鑫火
L01
func04.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int elements[1024];
	const int capacity = 1024;
	int count = 0;
};

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)                   
{
	int H = -1;
	if (stack.capacity > stack.count)
	{
		H = 0;
		stack.elements[stack.count] = in;                          //将in值输入数组中
		stack.count++;                                             //增大数组长度
	}
	return H;
}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)
{
	int H = -1;
	if (stack.count > 0)
	{
		H = 0;
		out = stack.elements[stack.count - 1];                   //输出数组中的数
		stack.count--;                                           //减少数组长度
	}
	return H;
}
L02
func04.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
extern char spechars[10] = { ' ', '"','#','%','&','(',')','/',':','@' };
char changed[10][4] = { "%20","%22","%23","%25","%26","%28","%29","%2F","%3A","%40" };  //�����滻����
void change(char* str, char changed[10][4], int i, int j, int len)                      //��changed�����еĵ�jλ��str�����еĵ�iλ����
{
	for (int k = len; k > i; k = k - 1)
	{
		str[k + 1] = str[k - 1];
	}
	str[i - 1] = changed[j - 1][0];
	str[i] = changed[j - 1][1];
	str[i + 1] = changed[j - 1][2];
}
int substitute(char* str, int len)
{
	for (int i = 0; i < len; i++)
	{
		for (int a = 0; a < 10; a++)
		{
			if (str[i] == spechars[a])             //�ҵ��������
			{
				change(str, changed, i + 1, a + 1, len);   //�滻ΪASCII��
				len = len + 2;        //���鳤�ȱ��
				break;   //���⽫ASCII���С�%'����Ϊ�������
			}
		}
	}
	str[len] = '\0';
	len = len + 1;
	if (len > 1024)    //�����Ƿ񳤶����
		return -1;
	else
		return 0;
}
L03
func__.cpp
/**********************************
 * 字符串查找函数
 * 输入 : str要进行查找操作的字符串
 * 输入 : strLen查找字符串长度
 * 输入 : pattern要匹配的字符串
 * 输入 : patternLen匹配字符串长度
 * 输入 : indexes匹配项索引数组
 * 输出 : 成功匹配个数
 **********************************/
int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes)
{
	
}

L04
func04.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{
	int H;
	for (int i = 1; i < len; ++i) // 从数组中的第二个元素开始
	{
		H = nums[i]; // 记录当前的元素
		int j = i - 1;
		while (j >= 0 && H < nums[j]) // 将当前元素与之前的已经排序好的序列元素进行挨个比较
		{
			nums[j + 1] = nums[j]; // 已经排序好的序列整体向后移动
			--j;
		}
		nums[j + 1] = H; // 插入当前的元素
	}
}
L06
func__.cpp
/**********************************
 * 计算子数组最大和函数
 * 输入 : nums要进行计算操作的数组
 * 输入 : len输入数组长度
 * 输出 : 最大和
 **********************************/
float maxSum(float* nums, int len)
{
	
}

