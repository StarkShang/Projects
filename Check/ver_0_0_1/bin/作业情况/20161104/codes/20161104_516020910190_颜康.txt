20161104_516020910190_颜康
L01
func20.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int _elements[1024];
    int capacity ;
	int count ;
};//定义结构体包含int elements,int capacity,int count.
/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)//定义函数push
{
	int a;
	stack.capacity=1024;//初始化数组总长度
    if(stack.capacity>=stack.count)//判断栈是否已满
	{	stack._elements[stack.count]=in;//未满则入栈
	stack.count=stack.count+1;//入一个则元素个数加一
	a=0;//令a=0
	}
	else
		a=-1;//否则a=-1
	return a;//返回值a
}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)//定义函数pop
{   
	int a;
	if(stack.count>0)//判断元素个数是否为空
	{
		a=0;
		stack.count=stack.count-1;//不为空则a=0,元素个数减一
	}
	else
		a=-1;//为空则a=-1
	return a;//返回值a
}
main.cpp
#include <iostream>
struct Stack
{
	int _elements[1024];
    int capacity ;
	int count ;
};
extern int push(struct Stack& stack, int in);
extern int pop(struct Stack& stack, int& out);

int main(int argc, char* argv[])
{  
	struct Stack stack;
	stack.capacity=1024;
	stack.count=0;
	std::cout << "At beginning, the stack has " << stack.count << " elements." << std::endl;
	std::cout << "---- Begin to push elements into stack ----" << std::endl;
	for (int i = 0; i < 10; i++)
	{
		int in = i*i;
		push(stack, in);
		std::cout << "[" << i << "] : push " << in << " into the stack;" << std::endl;
	}
	std::cout << "---- End to push elements into stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl << std::endl;

	std::cout << "---- Begin to pop elements from stack ----" << std::endl;
	int out;
	for (int i = 0; i < 10; i++)
	{  out= stack._elements[9-i];
		int flag = pop(stack, out);
		if (0 == flag)
		{
			std::cout << "[" << i << "] : pop " << out << " from the stack;" << std::endl;
		}
		else
		{
			
		}
	}
	std::cout << "---- End to pop elements from stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl;

	return 0;
}
L02
func20.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
int substitute(char* str, int len)
{   
	char spechars[10]={' ','��','#','%','&','(',')','/',':','@'};//����ȫ�����鴢���ַ�
    char f[3][10]={{'%','%','%','%','%','%','%','%','%','%'},{'2','2','2','2','2','2','2','2','3','4'},{'0','2','3','5','6','8','9','F','A','0'}};//�����ά���飬����ASCII��
    for(int i=0;i<len;i++)
	{
		for(int j=0;j<10;j++)
		{
			if (str[i]==spechars[j])//���������url�е��ַ�
			{
				len+=2;//ת���󳤶�����2
				str[i]=f[0][j];//��ֵ��һ��
			    for (int m=len;m>i;m--)
			    {
				    str[m+2]=str[m];//������λ
			    }
			    str[i+1]=f[1][j];
			    str[i+2]=f[2][j];//�ֱ����ת��ֵ
				break;
			}
	 
	     }   
	}
										
				
		if (len<=1024)
	  return 0;
  else 
	  return -1;//�ж��Ƿ񳬹�1024
 }
L04
func20.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{    
	 for (int j=1; j<len; j++)  //逐个元素进行比较
    {  
        float a = nums[j]; //先将该元素赋值于a 
        int i = j-1;  
        while (i>=0 && nums[i]>a)  
        {  
            nums[i+1] =nums[i];  
            i--;  
        }  //将a与前面的元素从后往前依次比较，直到该元素比后一个元素小
        nums[i+1] = a;  //将该元素插入
    }  
}

