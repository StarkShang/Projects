20161104_516020910171_鲍相羽
L01
func01.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int elements[1024];
	int capcity,count;
};
/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 入栈操作时 需要判断栈是否已满。若可以正常入栈，则返回 0；若超出栈空间而不能入栈，则返 回-1
 *****************************/
int push(struct Stack& stack, int in)
{
	int flag;//定义变量
	if(stack.count<=stack.capcity)//判断栈是否已满
	{flag=0;//未满，返回0值
	stack.elements[stack.count]=in;//数入栈
	stack.count++;
	}
	else flag=-1;//超出栈空间返回-1
	return flag;

}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 出栈操作时 需要判断栈是否已空。若可以正常出栈，则返回 0；若栈内没有元素无法出栈，则返 回-1
 *****************************/
int pop(struct Stack& stack, int& out)
{
	int flag;//定义变量
	if(stack.count>0)//判断栈是否已空
	{
		flag=0;//若可以正常出栈，则返回 0
		out=stack.elements[stack.count-1];//元素出栈
		stack.count--;
	}
	else flag=-1;//若栈内没有元素无法出栈，则返 回-1
	return flag;
}
L02
func01.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/

#include<string.h>//
extern char spechars[10]={' ','"','#','%','&','(',')','/',':','@'};//
 
int substitute(char* str, int len)
{ 
	int flag;//�������
	for( int i=0;i<=len;i++)//�ַ������ѭ��
	{if( str[i]==spechars[0])
	    { 
			for(int j=i+1;j<=len+2;j++)//�滻�ַ�
			{str[j+2]=str[j];}//��֮����ַ���������ƶ�����λ��
			str[i]='%';//��ԭ�����ַ��滻
			str[i+1]='2';
			str[i+2]='0';
        }
		else if( str[i]==spechars[1])//���������ַ�
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='2';}
		else if( str[i]==spechars[2])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='3';}
		else if( str[i]==spechars[3])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='5';}
		else if( str[i]==spechars[4])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='6';}
		else if( str[i]==spechars[5])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='8';}
		else if( str[i]==spechars[6])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='9';}
		else if( str[i]==spechars[7])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='F';}
		else if( str[i]==spechars[8])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='3';
			str[i+2]='A';}
		else if( str[i]==spechars[9])
		{for(int j=i+1;j<=len+2;j++)
			{str[j+2]=str[j];}
			str[i]='%';
			str[i+1]='4';
			str[i+2]='0';}
	}
	
	if((strlen(str)+1)<=1024)//�ж��ַ����ĳ���
	{flag=0;}//�ڷ�Χ��
	else
		flag=-1;//�ڷ�Χ��
	return(flag);//�����ж�ֵ
}

L03
func01.cpp
/**********************************
 * 字符串查找函数
 * 输入 : str要进行查找操作的字符串
 * 输入 : strLen查找字符串长度
 * 输入 : pattern要匹配的字符串
 * 输入 : patternLen匹配字符串长度
 * 输入 : indexes匹配项索引数组
 * 输出 : 成功匹配个数
 **********************************/
int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes)
{
	int k=0,j=0,i,m;
	while(str[k]!=0&&pattern[j]!=0)
	{
		if(str[k]!=pattern[j])
		{k++;}
		else{
			i=k;
			while(str[i]==pattern[j]&&pattern[j]!=0&&str[i])
			{
				i++;
				j++;
			}
			if(pattern[j]==0)
			{
				m=k+1;
			}
			else
			{
				k++;
				j=0;
			}
		}
	}
	if(str[k]==0&&pattern[j]!=0)
		m=0;
	return m;
}

L04
func01.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{
	int i;
	for(i=1;i<len;i++)
	{
		float a=nums[i];//定义一个目标值
		int j = i;
		while(j>=0&&a<=nums[j-1])//当目标值小于它左边的数时
		{
			nums[j]=nums[j-1];//数据向右移动一格
			j--;
		}
		nums[j]=a;
	}
	return;
}

