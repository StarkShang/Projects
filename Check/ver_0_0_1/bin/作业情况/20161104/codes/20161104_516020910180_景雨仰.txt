20161104_516020910180_景雨仰
L01
func10.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/
struct Stack
{
	int _elements[1024];
	int capacity;
	int count;
};

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)
{
	int i;
	if(stack.count==stack.capacity)//判断是否已满
		i=-1;
	else
	{
		stack._elements[stack.count]=in;
		stack.count++;
		i=0;
	}
	return i;
}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)
{
	int i;
	if(stack.count==0)//判断是否已空
		i=-1;
	else
	{
		out=stack._elements[stack.count-1];
		i=0;
		stack.count--;
	}
	return i;
}
L02
func10.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
#include<string>
int substitute(char* str, int len)
{
	char spechars[10];//�洢�滻��Ԫ
	spechars[0]=' ';
	spechars[1]='"';
	spechars[2]='#';
	spechars[3]='%';
	spechars[4]='@';
	spechars[5]='(';
	spechars[6]=')';
	spechars[7]='/';
	spechars[8]=':';
	spechars[9]='@';
	char final[1024];//���崢���µ�����
	int i,j,k=0,r;
	for(i=0;i<len;i++)//��ÿһ���ַ����в��Һ��滻
	{
		bool t=false;//����t�ж��Ƿ��滻
		j=0;
		do
		{
			if(str[i]==spechars[j])//�����Ƿ���Ҫ�滻
			{
				switch(j)//�滻
				{
				case 0:final[k]='%';final[k+1]='2';final[k+2]='0';break;
				case 1:final[k]='%';final[k+1]='2';final[k+2]='2';break;
				case 2:final[k]='%';final[k+1]='2';final[k+2]='3';break;
				case 3:final[k]='%';final[k+1]='2';final[k+2]='5';break;
				case 4:final[k]='%';final[k+1]='2';final[k+2]='6';break;
				case 5:final[k]='%';final[k+1]='2';final[k+2]='8';break;
				case 6:final[k]='%';final[k+1]='2';final[k+2]='9';break;
				case 7:final[k]='%';final[k+1]='2';final[k+2]='F';break;
				case 8:final[k]='%';final[k+1]='3';final[k+2]='A';break;
				case 9:final[k]='%';final[k+1]='4';final[k+2]='0';break;
				}
				k+=3;
				t=true;
			}
			else
				j++;
		}
		while(j<10&&t==false);
		if(t==false)//δ���滻
		{
			final[k]=str[i];
			k++;
		}
	}
	if(k>1024)//�ж��Ƿ񳬳����鳤��
		r=-1;
	else
	{
		int q;
		for(q=0;q<k;q++)//������洢��ԭ�������鵥Ԫ��
			str[q]=final[q];
		r=0;
	}
	return r;
	
}
L03
func10.cpp
/**********************************
 * 字符串查找函数
 * 输入 : str要进行查找操作的字符串
 * 输入 : strLen查找字符串长度
 * 输入 : pattern要匹配的字符串
 * 输入 : patternLen匹配字符串长度
 * 输入 : indexes匹配项索引数组
 * 输出 : 成功匹配个数
 **********************************/
int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes)
{
	int i,n=0;//n为计数器
	for(i=0;i<strLen-patternLen+1;i++)//从第一个字符开始寻找匹配项
	{
		int j=i,k=0;
		bool t=true;
		do//如有不匹配则跳出
		{
			if(str[j]!=pattern[k])
			{
				t=false;
			}
			k++;
			j++;
		}
		while(t==true&&k<patternLen);
		if(t==true)//都匹配则找到匹配项
		{
			indexes[n]=i;
			n++;
		}
	}
	return n;
}

L04
func10.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{
	int i;
	for(i=1;i<len;i++)//对每个数进行查找比较
	{
		int j=0;
		bool t=false;
		do//判断应该处于哪个数右边
		{
			if(nums[i]<nums[j])//如果原来此位置的数大于未排序的该数，则它与它之后的数向后移一位，它的位置给该数
			{
				t=true;
				int temp=nums[i],q;
				for(q=i;q>j;q--)//调换顺序
				{
					nums[q]=nums[q-1];
				}
				nums[j]=temp;
			}
			j++;
		}
		while(t==false&&j<i);//排完序后跳出循环
	}
}
L06
func10.cpp
/**********************************
 * 计算子数组最大和函数
 * 输入 : nums要进行计算操作的数组
 * 输入 : len输入数组长度
 * 输出 : 最大和
 **********************************/
float maxSum(float* nums, int len)
{
	int i,max=0;
	for(i=1;i<=len;i++)//几个数相加
	{
		int j;
		for(j=0;j<len-i+1;j++)//从第几个数开始加
		{
			int k,s=0;
			for(k=j;k<j+i;k++)//求和
				s+=nums[k];
			if(s>max)//判断是否利润最大
				max=s;
		}
	}
	return max;
}

