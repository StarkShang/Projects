20161104_516020910173_刘泰然
L01
func03.cpp
/*****************************
 * 栈数据结构的定义
 *****************************/

struct Stack
{
	int elements[1024];//栈数据数组
	int capacity;//数组总长度
	int count;//已入栈元素个数成员s
};

/*****************************
 * 入栈操作
 * 输入 : stack要处理的栈结构
 * 输入 : in要入栈的数
 * 输出 : 状态码
 *****************************/
int push(struct Stack& stack, int in)
{
	stack.capacity=1024;//栈长
	if(stack.count<=stack.capacity)//判断是否栈满
	{
		stack.elements[stack.count-1]=in;//入栈
		return 0;
	}
	else
		return -1;//栈满，返回-1
  
}

/*****************************
 * 出栈操作
 * 输入 : stack要处理的栈结构
 * 输出 : out出栈结果
 * 输出 : 状态码
 *****************************/
int pop(struct Stack& stack, int& out)
{
	stack.capacity=1024;
	if(stack.count>=0)//判断是否栈空
	{
		stack.elements[stack.count]=stack.elements[stack.count+1];//出栈
		return 0;
	}
	else
		return -1;//栈空，返回-1
}
main.cpp
#include <iostream>

struct Stack
{
	int elements[1024];
	int capacity;
	int count ;
};

extern int push(struct Stack& stack, int in);
extern int pop(struct Stack& stack, int& out);

int main(int argc, char* argv[])
{
	struct Stack stack;
	stack.capacity=1024;
	stack.count = 0;
	std::cout << "At beginning, the stack has " << stack.count << " elements." << std::endl;
	std::cout << "---- Begin to push elements into stack ----" << std::endl;
	for (int i = 0; i < 10; i++)
	{
		stack.count++;
		int in = i*i;
		push(stack, in);
		std::cout << "[" << i << "] : push " << in << " into the stack;" << std::endl;
	}
	std::cout << "---- End to push elements into stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl << std::endl;

	std::cout << "---- Begin to pop elements from stack ----" << std::endl;
	int out;
	for (int i = 0; i < 10; i++)
	{
		stack.count--;
		out=(9-i)*(9-i);
		int flag = pop(stack, out);
		if (0 == flag)
		{
			std::cout << "[" << i << "] : pop " << out << " from the stack;" << std::endl;
		}
		else
		{
			
		}
	}
	std::cout << "---- End to pop elements from stack ----" << std::endl;
	std::cout << "Now, the stack has " << stack.count << " elements." << std::endl;

	return 0;
}
L02
func03.cpp
/**********************************
 * �ַ����滻����
 * ���� : strҪ�����滻�������ַ���
 * ���� : len�����ַ�������
 * ��� : ״̬��
 **********************************/
int substitute(char* str, int len)
{
	char spechars[10]={' ','"','#','%','&','(',')','/',':','@'};
	for(len=0;;len++)
	{
		if(str[len]=='\0')
			break;
	}//�����ַ�������
	if(len>1024)//�����������-1
		return -1;
	else//�����������
	{
		int i;
		for(i=0;i<=len;i++)
		{
				if(str[i]==spechars[0])//�� ����ת��
				{
					int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='0';
					
				}
				if(str[i]==spechars[1])//��"����ת��
				{
					int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='2';
					
				}
				if(str[i]==spechars[2])//"#"��ת��
				{
				int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='3';
					
				}
				if(str[i]==spechars[3])//"%"��ת��
				{
				int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='5';
					
				}
				if(str[i]==spechars[4])//"&"��ת��
				{
					int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='6';
					
				}
				if(str[i]==spechars[5])//��������ת��
				{
					int n;
					for(n=1;n<len-i;n++)
					{
					str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='8';
					
				}
			if(str[i]==spechars[6])//")"��ת��
				{
				int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='9';
					
				}
			if(str[i]==spechars[7])//��/����ת��
				{
					int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='2';
					str[i+2]='F';
					
				}
			if(str[i]==spechars[8])//��������ת��
				{
					int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='3';
					str[i+2]='A';
					
				}
			if(str[i]==spechars[9])//��@����ת��
				{
					int n;
					for(n=1;n<len-i;n++)
					{
						str[len+2-n]=str[len-n];
					}//�������λ
					str[i]='%';
					str[i+1]='4';
					str[i+2]='0';
				}
		}
		return 0;
	}
}
		

	

main.cpp
#include <iostream>
#include <string>

extern int substitute(char* str, int len);
int main(int argc, char* argv[])
{
	char str[1024] = { 0 };
	std::cout << "Please input an URL [less than 1024(include'\\0')] : ";
	std::cin.getline(str, 1024);
	int flag = (int)substitute(str, (int)strlen(str));
	if (0 == flag)
	{
		std::cout << "The new URL is : " << str << std::endl;
	}
	else
	{
		std::cout << "The URL is too long to substitute!";
	}
	return 0;
}
L03
func03.cpp
/**********************************
 * 字符串查找函数
 * 输入 : str要进行查找操作的字符串
 * 输入 : strLen查找字符串长度
 * 输入 : pattern要匹配的字符串
 * 输入 : patternLen匹配字符串长度
 * 输入 : indexes匹配项索引数组
 * 输出 : 成功匹配个数
 **********************************/
int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes)
{
	int i,j,a;
	a=0;
	for(strLen=0;;strLen++)
	{
		if(str[strLen]=='\0')
			break;
	}//计算字符串str长度
	for(patternLen=0;;patternLen++)
	{
		if(pattern[patternLen]=='\0')
			break;
	}//计算字符串pattern长度
	for(i=0;i<strLen;i++)
	{
		
		for(j=0;j<patternLen;j++)
		{
			int n=0;
			for(j=0;j<patternLen;j++)
			{
				if(str[i+j]==pattern[j])
				n++;//计算连续相符文字的个数
			}
			if(n==patternLen)//若连续相符文字的个数等于pattern长度
			{
			    indexes[a]=i;//输入次序
				a++;//计算个数
				
			}
			
		}
		
	}
	return a;//返回相符个数值				
}

main.cpp
#include <iostream>
#include <string>

extern int searchSubstring(char* str, int strLen, char* pattern, int patternLen, int* indexes);
int main(int argc, char* argv[])
{
	char str[1024] = { 0 };
	char pattern[1024] = { 0 };
	int  indexes[1024] = { 0 };
	std::cout << "Please input the text [less than 1024(include'\\0')] : ";
	std::cin.getline(str, 1024);
	std::cout << "Please input the search pattern [less than 1024(include'\\0')] : ";
	std::cin.getline(pattern, 1024);

	int num = searchSubstring(str, (int)strlen(str), pattern, (int)strlen(pattern), indexes);
	if (0 == num)
	{
		std::cout << "There is no matching!";
	}
	else if (1 == num)
	{
		std::cout << "There is " << num << " matching." << std::endl;
	}
	else
	{
		std::cout << "There are " << num << " matchings." << std::endl;
	}
	for (int i = 0; i < num; i++)
	{
		std::cout << "\t[" << i+1 << "] start form : " << indexes[i] << std::endl;
	}
	return 0;
}
L04
func03.cpp
/**********************************
 * 插入排序函数
 * 输入 : nums要进行排序操作的数组
 * 输入 : len输入数组长度
 **********************************/
void insertSort(float* nums, int len)
{
    float b;
	int i,a;
	for(i=1;i<len;i++)//在长度范围内
	{
		b=nums[i];
		a=i-1;
		while(a>=0&&b<nums[a])//插入排序
		{
		  nums[a+1]=nums[a];
		  a--;
		}
		nums[a+1]=b;
	}

}
main.cpp
#include <iostream>

extern void insertSort(float* nums, int len);
int main(int argc, char* argv[])
{
	int len = 0;
	float nums[1024] = { 0 };
	std::cout << "Please input the size of numbers [less than 1024] : ";
	std::cin >> len;
	std::cout << "Please input numbers [less than 1024] : ";
	for (int i = 0; i < len; i++)
	{
		std::cin >> nums[i];
	}

	insertSort(nums, len);

	std::cout << "After insertion sorting, the numbers are : ";
	for (int i = 0; i < len; i++)
	{
		std::cout << nums[i] << " ";
	}
	std::cout << std::endl;

	return 0;
}
